#!/usr/bin/env ruby
#
# npm2rpm
#
#  Generate spec from Nodejs NPM
#
# Copyright (c) 2013 Klaus KÃ¤mpf <kkaempf@suse.de>
#
# Licensed under the Ruby license
#

require 'rubygems'

$:.push(File.join(File.dirname(__FILE__), '..', 'lib'))

require 'npm2rpm'

options = Npm2Rpm::Options.new

debug = options.debug

dir_exists = false

unless options.package
  STDERR.puts "No package given, finding ./*.tgz" if debug
  Dir.new(".").each do |f|
    if f =~ /^(.*)\.tgz$/
      split = $1.split "-"
      v = split.pop
      n = split.join "-"
      options.package = "#{n}@#{v}"
      dir_exists = true
      break
    end
  end
  options.usage 'Missing package argument' unless options.package;
end

STDERR.puts "Extracting metadata" if debug

metadata = Npm2Rpm::Metadata.new options.package, options.version

STDERR.puts "Creating spec" if debug

spec = Npm2Rpm::Spec.new(metadata)

unless dir_exists
  begin
    STDERR.puts "Creating subdir #{spec.name.inspect}" if debug
    Dir.mkdir spec.name
  rescue Errno::EEXIST
  end
  Dir.chdir spec.name
end

STDERR.puts "Writing rpmlintrc" if debug

rpmlintrc = Npm2Rpm::Rpmlintrc.new(spec.name, metadata, options)
rpmlintrc.write

spec.add_source rpmlintrc.name

STDERR.puts "Writing .spec" if debug

spec.write

STDERR.puts "Writing .changes" if debug

changes = Npm2Rpm::Changes.new(spec.name, metadata, options)
changes.write

STDERR.puts "Running osc" if debug

if dir_exists
  Kernel.system "osc ci -m 'spec cleanup'"
else
  Dir.chdir ".."
  Kernel.system "osc add #{spec.name}"
  Kernel.system "osc ci #{spec.name} -m '#{changes.message}'"
end
